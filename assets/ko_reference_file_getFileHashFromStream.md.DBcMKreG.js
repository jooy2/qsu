import{_ as l,C as a,c as n,o as d,j as s,G as t,ag as h,a as i}from"./chunks/framework.DWHySUGW.js";const b=JSON.parse('{"title":"getFileHashFromStream","description":"","frontmatter":{},"headers":[],"relativePath":"ko/reference/file/getFileHashFromStream.md","filePath":"ko/reference/file/getFileHashFromStream.md","lastUpdated":1761108066000}'),m={name:"ko/reference/file/getFileHashFromStream.md"},p={id:"getfilehashfromstream",tabindex:"-1"};function c(k,e,g,f,u,F){const r=a("Lang"),o=a("NodeRequired");return d(),n("div",null,[s("h1",p,[e[0]||(e[0]=i("getFileHashFromStream ",-1)),t(r,{js:""}),e[1]||(e[1]=i()),e[2]||(e[2]=s("a",{class:"header-anchor",href:"#getfilehashfromstream","aria-label":'Permalink to "getFileHashFromStream <Lang js />"'},"​",-1))]),t(o,{ko:""}),e[3]||(e[3]=h('<p>Node.js ReadableStream 객체의 파일을 특정 알고리즘으로 해시된 값으로 반환합니다. 기본 알고리즘은 <code>md5</code>입니다. 이 메서드는 <code>Promise</code>를 사용하여 유효한 해시 값을 반환합니다.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>fileStream::string</code>: Node.js Readable file stream</li><li><code>algorithm::&#39;md5&#39;|&#39;sha1&#39;|&#39;sha256&#39;|&#39;sha512&#39;</code>: OpenSSL algorithm to be used for file hashing</li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>Promise::string</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFileHashFromStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/user/text.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sha1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;38851813f75627d581c593f3ccfb7061dd013fbd&#39;</span></span></code></pre></div>',7))])}const E=l(m,[["render",c]]);export{b as __pageData,E as default};
