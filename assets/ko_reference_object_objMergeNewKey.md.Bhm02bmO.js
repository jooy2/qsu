import{_ as e,C as t,c as l,o as p,j as i,ag as h,a,G as k}from"./chunks/framework.DWHySUGW.js";const u=JSON.parse('{"title":"objMergeNewKey","description":"","frontmatter":{},"headers":[],"relativePath":"ko/reference/object/objMergeNewKey.md","filePath":"ko/reference/object/objMergeNewKey.md","lastUpdated":1761108066000}'),r={name:"ko/reference/object/objMergeNewKey.md"},o={id:"objmergenewkey",tabindex:"-1"};function d(E,s,c,g,y,b){const n=t("Lang");return p(),l("div",null,[i("h1",o,[s[0]||(s[0]=a("objMergeNewKey ",-1)),k(n,{js:""}),s[1]||(s[1]=a()),s[2]||(s[2]=i("a",{class:"header-anchor",href:"#objmergenewkey","aria-label":'Permalink to "objMergeNewKey <Lang js />"'},"​",-1))]),s[3]||(s[3]=h(`<p>두 개의 객체 데이터를 하나의 객체로 병합합니다. 이 방법의 핵심은 두 객체를 비교하고 새로 추가된 키 데이터가 있다면 추가하는 것입니다.</p><p>값이 기존 키와 다르면 변경된 값으로 대체됩니다. 배열의 길이가 같고 배열의 데이터 유형이 객체인 경우, 두 객체의 동일한 배열 인덱스에서 객체 키를 다시 비교하여 새 키를 추가합니다.</p><p>일반 배열(배열 데이터가 객체가 아닌 경우)의 경우, 원래 값을 유지하지만, 세 번째 인수 <code>options</code>에 다음을 지정하면 배열 처리 방법을 사용자 지정할 수 있습니다.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	arrayAction: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;original&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // option value: &#39;original&#39; | &#39;replace&#39; | &#39;append&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objMergeNewKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1, obj2, options);</span></span></code></pre></div><p><code>arrayAction</code>이 지정되지 않으면, <code>original</code>이 기본 동작이 됩니다. 각 동작의 기능은 다음과 같습니다:</p><ul><li><code>original</code>: 기존 값 사용</li><li><code>replace</code>: 새로운 값 사용</li><li><code>append</code>: 기존 값에 새로운 값 추가(중복 허용)</li></ul><p>첫 번째 인수는 원래 값을 지정해야 하고, 두 번째 인수는 새로 추가된 키를 포함하는 객체 값을 지정해야 합니다.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>obj::object</code></li><li><code>obj2::object</code></li><li><code>arrayAction::object?</code>: &#39;original&#39; | &#39;replace&#39; | &#39;append&#39;</li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>object|null</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> objMergeNewKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		b: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		c: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		b: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		c: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns { a: 1, b: { a: 1, b: 2 }, c: [1, 2], d: 4</span></span></code></pre></div>`,13))])}const C=e(r,[["render",d]]);export{u as __pageData,C as default};
