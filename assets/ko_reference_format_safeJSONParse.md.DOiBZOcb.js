import{_ as r,C as t,c as p,o as k,j as a,ag as h,a as i,G as e}from"./chunks/framework.DWHySUGW.js";const F=JSON.parse('{"title":"safeJSONParse","description":"","frontmatter":{},"headers":[],"relativePath":"ko/reference/format/safeJSONParse.md","filePath":"ko/reference/format/safeJSONParse.md","lastUpdated":1761907746000}'),d={name:"ko/reference/format/safeJSONParse.md"},o={id:"safejsonparse",tabindex:"-1"};function E(g,s,u,c,y,b){const n=t("Lang"),l=t("DartNamed");return k(),p("div",null,[a("h1",o,[s[0]||(s[0]=i("safeJSONParse ",-1)),e(n,{dart:"",js:""}),s[1]||(s[1]=i()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#safejsonparse","aria-label":'Permalink to "safeJSONParse <Lang dart js />"'},"​",-1))]),s[6]||(s[6]=a("p",null,[i("인수 값이 잘못된 유형이거나 "),a("code",null,"JSON"),i(" 형식인 경우에도 오류를 반환하지 않고 구문 분석을 시도합니다. 구문 분석이 실패하면 "),a("code",null,"fallback"),i("에 설정된 객체로 대체됩니다. "),a("code",null,"fallback"),i("의 기본값은 빈 객체입니다.")],-1)),s[7]||(s[7]=a("h2",{id:"parameters",tabindex:"-1"},[i("Parameters "),a("a",{class:"header-anchor",href:"#parameters","aria-label":'Permalink to "Parameters"'},"​")],-1)),a("ul",null,[s[5]||(s[5]=a("li",null,[a("code",null,"jsonString::any")],-1)),a("li",null,[s[3]||(s[3]=a("code",null,"fallback::object",-1)),s[4]||(s[4]=i()),e(l)])]),s[8]||(s[8]=h(`<h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>object</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7nPnA" id="tab-UrlAUXM" checked><label data-title="JavaScript" for="tab-UrlAUXM">JavaScript</label><input type="radio" name="group-7nPnA" id="tab-BDErbYQ"><label data-title="Dart" for="tab-BDErbYQ">Dart</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeJSONParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;a&quot;:1,&quot;b&quot;:2}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeJSONParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns { a: 1, b: 2 }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns {}</span></span></code></pre></div><div class="language-dart vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeJSONParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&quot;a&quot;:1,&quot;b&quot;:2}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeJSONParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns { a: 1, b: 2 }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns {}</span></span></code></pre></div></div></div>`,4))])}const m=r(d,[["render",E]]);export{F as __pageData,m as default};
