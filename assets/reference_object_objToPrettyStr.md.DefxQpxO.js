import{_ as r,C as o,c as i,o as n,j as e,ag as l,a,G as p}from"./chunks/framework.DWHySUGW.js";const j=JSON.parse('{"title":"objToPrettyStr","description":"","frontmatter":{},"headers":[],"relativePath":"reference/object/objToPrettyStr.md","filePath":"en/reference/object/objToPrettyStr.md","lastUpdated":1761108066000}'),d={name:"reference/object/objToPrettyStr.md"},h={id:"objtoprettystr",tabindex:"-1"};function c(k,t,u,b,m,y){const s=o("Lang");return n(),i("div",null,[e("h1",h,[t[0]||(t[0]=a("objToPrettyStr ",-1)),p(s,{js:""}),t[1]||(t[1]=a()),t[2]||(t[2]=e("a",{class:"header-anchor",href:"#objtoprettystr","aria-label":'Permalink to "objToPrettyStr <Lang js />"'},"​",-1))]),t[3]||(t[3]=l('<p>Recursively output all the steps of the JSON object (<code>JSON.stringify</code>) and then output the JSON object with newlines and tab characters to make it easier to read in a <code>console</code> function, for example.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>obj::object</code></li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>string</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objToPrettyStr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns &#39;{\\n\\t&quot;a&quot;: 1,\\n\\t&quot;b&quot;: {\\n\\t\\t&quot;c&quot;: 1,\\n\\t\\t&quot;d&quot;: 2\\n\\t}\\n}&#39;</span></span></code></pre></div>',7))])}const E=r(d,[["render",c]]);export{j as __pageData,E as default};
