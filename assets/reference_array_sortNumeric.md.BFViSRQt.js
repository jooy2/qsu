import{_ as t,C as r,c as n,o as l,j as s,ag as h,a as i,G as o}from"./chunks/framework.DWHySUGW.js";const b=JSON.parse('{"title":"sortNumeric","description":"","frontmatter":{},"headers":[],"relativePath":"reference/array/sortNumeric.md","filePath":"en/reference/array/sortNumeric.md","lastUpdated":1761110835000}'),p={name:"reference/array/sortNumeric.md"},d={id:"sortnumeric",tabindex:"-1"};function k(c,a,E,m,u,g){const e=r("Lang");return l(),n("div",null,[s("h1",d,[a[0]||(a[0]=i("sortNumeric ",-1)),o(e,{js:""}),a[1]||(a[1]=i()),a[2]||(a[2]=s("a",{class:"header-anchor",href:"#sortnumeric","aria-label":'Permalink to "sortNumeric <Lang js />"'},"​",-1))]),a[3]||(a[3]=h(`<p>When sorting an array consisting of strings, it sorts first by the numbers contained in the strings, not by their names. For example, given the array <code>[&#39;1-a&#39;, &#39;100-a&#39;, &#39;10-a&#39;, &#39;2-a&#39;]</code>, it returns <code>[&#39;1-a&#39;, &#39;2-a&#39;, &#39;10-a&#39;, &#39;100-a&#39;]</code> with the smaller numbers at the front.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>array::string[]</code></li><li><code>descending::boolean</code></li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>string[]</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-NZScy" id="tab-xrz6LEV" checked><label data-title="JavaScript" for="tab-xrz6LEV">JavaScript</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortNumeric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a1a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b2a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aa1a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a11a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a3a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a2a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns [&#39;1&#39;, &#39;1a&#39;, &#39;a1a&#39;, &#39;a2a&#39;, &#39;a3a&#39;, &#39;a11a&#39;, &#39;aa1a&#39;, &#39;b2a&#39;]</span></span></code></pre></div></div></div>`,7))])}const F=t(p,[["render",k]]);export{b as __pageData,F as default};
