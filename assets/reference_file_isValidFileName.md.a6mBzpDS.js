import{_ as r,C as a,c as h,o as p,j as i,G as s,ag as d,a as t}from"./chunks/framework.DWHySUGW.js";const y=JSON.parse('{"title":"isValidFileName","description":"","frontmatter":{},"headers":[],"relativePath":"reference/file/isValidFileName.md","filePath":"en/reference/file/isValidFileName.md","lastUpdated":1761108066000}'),o={name:"reference/file/isValidFileName.md"},k={id:"isvalidfilename",tabindex:"-1"};function c(m,e,u,F,g,f){const l=a("Lang"),n=a("NodeRequired");return p(),h("div",null,[i("h1",k,[e[0]||(e[0]=t("isValidFileName ",-1)),s(l,{js:""}),e[1]||(e[1]=t()),e[2]||(e[2]=i("a",{class:"header-anchor",href:"#isvalidfilename","aria-label":'Permalink to "isValidFileName <Lang js />"'},"​",-1))]),s(n,{en:""}),e[3]||(e[3]=d(`<p>Determines whether the passed path or filename is using a system-accepted string (Also check the valid file length). Returns false if the name is not available.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>filePath::string</code>: File or directory path</li><li><code>unixType::boolean?</code>: Passes true if the file type is unix type.</li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>boolean</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isValidFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Windows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">System32*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isValidFileName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home/user/.bashrc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div>`,7))])}const _=r(o,[["render",c]]);export{y as __pageData,_ as default};
