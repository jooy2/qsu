import{_ as l,C as i,c as r,o as p,j as a,G as e,ag as o,a as t}from"./chunks/framework.DWHySUGW.js";const C=JSON.parse('{"title":"joinFilePath","description":"","frontmatter":{},"headers":[],"relativePath":"reference/file/joinFilePath.md","filePath":"en/reference/file/joinFilePath.md","lastUpdated":1761108066000}'),k={name:"reference/file/joinFilePath.md"},d={id:"joinfilepath",tabindex:"-1"};function E(c,s,g,F,m,u){const n=i("Lang"),h=i("NodeRequired");return p(),r("div",null,[a("h1",d,[s[0]||(s[0]=t("joinFilePath ",-1)),e(n,{js:""}),s[1]||(s[1]=t()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#joinfilepath","aria-label":'Permalink to "joinFilePath <Lang js />"'},"​",-1))]),e(h,{en:""}),s[3]||(s[3]=o(`<p>Combines paths for each operating system according to the given parameter values.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>isWindows::boolean</code>: Whether the target operating system to be checked is Windows</li><li><code>paths::string[]</code>: A path value consisting of one or more strings. Omit the path separator and put it in the parameter.</li></ul><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><blockquote><p>string</p></blockquote><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinFilePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Windows&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;System32&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;C:\\Windows\\System32&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinFilePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.bashrc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/home/user/.bashrc&#39;</span></span></code></pre></div>`,7))])}const f=l(k,[["render",E]]);export{C as __pageData,f as default};
